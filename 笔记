#上传
git add --all
git commit -m "备注"
git push

#工具
random 随机
time 时间
math 计算
json json模块
re 正则表达式

multiprocessing 进程
    (Process)
    _ = Process(target="类", args=("",))
threading 线程
    (Thread)
    _ = Thread(target="类", args=("",))
    (Lock)
    _.acquire()上锁
    _.release()解锁

requests 基于HTTP协议来使用网络的第三库

socket 套接字
    (socket, SOCK_STREAM #IPv4# , AF_INET #TCP套接字# )
    """服务端"""
    _ = socket(#默认IPv4+TCP)
    _.bind(地址：端口) 绑定服务器
    _.listen(#队列大小) #监听客户端连接到服务器
    client, addr = _.accept() #第一个是客户端对象，第二个是地址+端口  如果没有，代码不会向下执行
    client.send(  .encode('utf-8')) #向客户端发送数据
    _.close()关闭

    """客户端"""
    _ = socket()
    _.connect((地址：端口))
    #接收数据
    data = client.recv(1024)
    while data:
        # 将收到的数据拼接起来
        in_data += data
        data = client.recv(1024) #不知服务端发送多少，每次接收1024字节
    receive-things = in_data.decode('utf-8')

PIL 图片加载/编辑
    (Image)
    _ = Image.open('文件路径') #打开图片
    _.show() #显示
    _.crop(x,y,a,b) #剪裁 从(x,y)到(a,b)
    _.resize("int","int") #缩放
    _.paste("image",(x,y)) #粘贴image到_(x,y)上
    _.rotate("角度") #旋转
    _.transpose(Image.FLIP_LEFT_RIGHT) #翻转
    _.putpixel((x, y), (R, G, B)) #改变像素颜色
    (ImageFilter)滤镜
    _.filter(ImageFilter.#滤镜)

heapq 堆排序
    #从列表中找出最大的或最小的N个元素
    heapq.nlargest("N","list") #最大n个元素
    heapq.nsmallest("N","list") #最小n个元素
    heapq.nlargest/nsmallest("N", "list", key=lambda x: x['']) #在 list = [ {"":""},{"":""} ] 中的元素

itertools 迭代工具
    # 产生ABCD的全排列
    itertools.permutations('ABCD')
    # 产生ABCDE的五选三组合
    itertools.combinations('ABCDE', 3)
    # 产生ABCD和123的笛卡尔积
    itertools.product('ABCD', '123')
    # 产生ABC的无限循环序列
    itertools.cycle(('A', 'B', 'C'))

